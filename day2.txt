----------------------------------
Branching & Merging Activities
Git undoing
gitignore
gitstash
-------------
What is first Branch?
--------------
Master or main

What is Branch?
- Code line -

Why we need Branch?
How to see a branch?
How to create a branch?
How to work with a branch?

--------------------------
BRANCHING IS FREE
- BRANCHING means COPY OF Entire Code into another line in SERVER -CLIENT based soft.
- But in GIT
	- 1 GB + 8KB
--------------------------
CODE
	BRANCH 1 ---> MAIN RELEASE
	BRANCH 2 ---> New Fea Release 
	BRANCH 3 ---> Bug Fixing
	BRANCH 4 ---> Minor Release
	BRANCH 5 ---> Hotpatches

master
main

- https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/branching-strategies-with-tfvc?view=azure-devops
- https://docs.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops
---------------------------------------------

Types of Branch
- Local Branch		Read - Write
- Remote Branch		Read only
- Temporary Branch	Read - Write (NOT RECOMMENDED TO USE)	

 501  git branch
  502  ls
  503  git branch -a
  504  git branch fea1
  505  git branch -a
  506  ls
  507  git checkout fea1
  508  git branch -a
  509  ls
  510  touch fea1.txt;git add --all;git commit -m"adding fea1"
  511  touch fea2.txt;git add --all;git commit -m"adding fea2"
  512  clear
  513  git log --oneline
  514  git checkout master
  515  ls
  516  clear
  517  git checkout fea1
  518  ls
  519  git checkout master
  520  git log --oneline
  521  git branch -a
------------------------------------------

git push git@github.com:devopsschool-demo-temporary/29nov2021.git fea1

======================================================================
Merging Strategy
===========================================
- Fast forward
- Recusive 
- Cherry-Pick
========================
- Fast forward

  527  git log --oneline
  528  git checkout fea1
  529  git log --oneline
  530  clear
  531  touch fea3.txt;git add --all;git commit -m"adding fea3"
  532  git log --oneline
  533  clear
  534  git checkout master
  535  clear
  536  git merge fea1


- Recusive
--------------------------------
 541  git merge fea1
  542  clear
  543  git log --oneline
  544  git checkout fea1
  545  git log --oneline
  546  clear
  547  touch recurse1.txt;git add --all;git commit -m"adding recurse-1"
  548  touch recurse2.txt;git add --all;git commit -m"adding recurse-2"
  549  git checkout master
  550  clear
  551  touch master1.txt;git add --all;git commit -m"adding master-1"
  552  touch master2.txt;git add --all;git commit -m"adding master-2"
  553  clear
  554  ls
  555  git checkout fea1
  556  touch recurse3.txt;git add --all;git commit -m"adding recurse-3"
  557  git checkout master
  558  touch master3.txt;git add --all;git commit -m"adding master-3"
  559  clear
  560  git checkout fea1
  561  touch recurse4.txt;git add --all;git commit -m"adding recurse-4"
  562  git log --oneline
  563  git checkout master
  564  git log --oneline
  565  clear
  566  git merge fea1
  567  git log --oneline
  568  history
=============================
cherry-picking





 570  clear
  571  clear
  572  git checkout fea1
  573  clear
  574  touch cherry-1.txt;git add --all;git commit -m"adding cherry-1"
  575  touch cherry-2.txt;git add --all;git commit -m"adding cherry-2"
  576  touch cherry-3.txt;git add --all;git commit -m"adding cherry-3"
  577  touch cherry-4.txt;git add --all;git commit -m"adding cherry-4"
  578  clear
  579  git log --oneline
  580  git checkout master
  581  ls
  582  git cherry-pick 1ff90d1
  583  ls


How to resolve conflict?
-------------------------------------
 589  vi fea1.txt
  590  git add --all
  591  git commit -m"done"
  592  git checkout fea1
  593  vi fea1.txt ]
  594  git commit -m"done fea1"
  595  git add --all
  596  git commit -m"done fea1"
  597  clear
  598  git checkout master
  599  git merge fea1
  600  ls
  601  git status
  602  clear
  603  vi fea1.txt
  604  vi fea1.txt
  605  vi fea1.txt
  606  git add --all
  607  git commit -m
  608  git commit -m"conf resolved"
  609  git merge fea1


Undoing
==========================
 613  git status
  614  touch clean.txt
  615  git status
  616  git clean -f -d
  617  git status
  618  clar
  619  clear
  620  touch reset.txt
  621  git status
  622  git add --all
  623  git status
  624  git reset reset.txt
  625  git status
  626  clear
  627  git status
  628  git clean -f -d
  629  clear
  630  git status
 631  touch good.txt
  632  git add --all
  633  git commit -m"Good code"
  634  clear
  635  git log --oneline
  636  clear
  637  touch bad.txt;git add --all;git commit -m"Bad Code"
  638  git log --oneline
  639  clear
  640  git log --oneline
  641  git revert c0a2c2c
  642  clear
  643  git revert c0a2c2c
  644  git log --oneline
  645  git diff 4184627 c0a2c2c
  646  git diff 4184627 7087bf3


gitignore
------------------------------
Rajesh Kumar@DESKTOP-6KRAAR8 MINGW64 /e/gitaz/repo1 (master)
$ cat .gitignore
build/
binary.exe

==============================================================================
==============================================================================
What is SonarQube?
- Quality Management tool
- From SonarSource
- Release
	https://www.sonarqube.org/downloads/
	+ 
	https://www.sonarlint.org/
- Version
	9.X
- Written in Java
	- Platform independent
	- Require JRE

Quality?
- Code Quality [ Focus ]
- Test Quality

Code Quality?
- Quality of the Code.

How?
- Peers Code Review
- Static Code Review
	- Code would Review Code
	- Rule would Review Code
	- 1 Rule === 1 Rule
	- Multiple Rules == ONE SCA TOOL
	https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis

Why Sonarqube?
- 70% of the bUGS found in the product after release 
	NOT coz of Bad testing
	But coz of Bad Code Quality

How it Works?
===============================

Human -> SonarQube Dashboard
	- JAVA/HTML/CSS
		- Code Issues
			    ---> DATABASE  <----- Reports<---- Scanner <----- Code
				-> H2
				- ORACLE
				- MSSQL
				- PS
	- Search (Elasticsearch)
	- Rules Database
	- Quality Profile
	- Quality Gates

============================
SonarQube Server
----------------
Dashboard
	Projects
		Code issues [ W W H W H ]
	Rules
	Quality Profile
	Quality Gates
Databases

Search - ES
============================
Workstation
----------------
Code 

Scanner

How to install Sonarqube Server
==================================
 1  clear
    2  ls
    3  sudo yum install java-11-openjdk-devel
    4  clear
    5  ls
    6  java --version
    7  clear
    8  ls
    9  wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.2.1.49989.zip
   10  sudo yum install wget unzip -y
   11  clear
   12  ls
   13  sudo yum install wget unzip -y
   14  wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.2.1.49989.zip
   15  clear
   16  ls
   17  unzip sonarqube-9.2.1.49989.zip
   18  clear
   19  ls
   20  cd sonarqube-9.2.1.49989
   21  ls
   22  cd bin/
   23  ls
   24  clear
   25  ls
   26  cd linux-x86-64/
   27  ls
   28  ./sonar.sh start
   29  ./sonar.sh status


65.0.170.64

http://65.0.170.64:9000/
admin
admin123


============================
Workstation
----------------
Code 
- git clone https://github.com/devopsschool-demo-labs-projects/java-sonarqube-helloworld-src
- Change sonar-project.properties
	- This is prop file for scanner	
	- Contains 
		projectName and many other metadata

----
sonar.projectKey=org.sonarqube:devopsschool
sonar.projectName=DevOpsSchool
sonar.projectVersion=1.0
sonar.login=admin
sonar.password=admin123
----


Scanner
- Download a scanner
- Extract it
- && Changa file conf/sonar-scanner.properties

#----- Default SonarQube server
sonar.host.url=http://65.0.170.64:9000



===================================
























