What is Maven?
==============================
- Build mgmt tool
- Automating Build Process
- Dev in Java
- For Java Projects
- Enforces Industry standard Build Process and Best Practices
- From Apache
	`- Open Source and Free

What is Build mgmt
-----------------------------
- Download a code
- Download a required lib
- Create required setup & dir structure
- Compile
- UT
- Packge
- Deploy2Artifactory
----------------------------
	Automating Build Process
	---------------------------------
	makefile -> ant -> nant -> msbuild -> maven -> gradle
https://www.devopsschool.com/path/

=======================================
How to install Maven?
-----------------------------------
		JDK - 11
		- https://www.oracle.com/in/java/technologies/javase/jdk11-archive-downloads.html
		- https://jdk.java.net/archive/

		JAVA_HOME
		set JAVA_HOME "C:\Program Files\Java\jdk1.8.0"
		set PATH "%PATH%;%JAVA_HOME%\bin";

		setx JAVA_HOME "C:\Program Files\Java\jdk1.8.0"
		setx PATH "%PATH%;%JAVA_HOME%\bin";


		Download Maven & extract
		- https://maven.apache.org/download.cgi

		Set Maven-Path/bin into PATH env.

		set PATH "%PATH%;C:\tools\maven\bin";
		setx PATH "%PATH%;C:\tools\maven\bin";		
	========================
	DONE

How to validate
$ javac - JAVA DONE
$ java --version

$ mvn
$ mvn --version
========================================================

Step 1 - Create a project dir structure

mvn archetype:generate -DgroupId=com.devopsschool.software -DartifactId=chat -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

================================================================================================================================================================================================================================================================================



E:\az\chat>mvn
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.577 s
[INFO] Finished at: 2021-12-02T11:36:16+05:30
[INFO] ------------------------------------------------------------------------
[ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException


What is goals?
What lifecycle phase 
	<plugin-prefix>:<goal>
What is plugins
===============================================
What is Lifecycle?
--------------------------------

Human Lifecycle?
-----------------------GOD---------------------------------
born -> kid -> teen -> young -> mid -> old -> die

Software Dev Lifecycle?
-----------------------Software Engieer--------------------
------------------------PROJECT Lifecycle-----------------------------------
Compile -> UT -> Package -> Dep2Artifactory
-------------------------------------------------------
		PHASE
Phase			Mantra(Goal)		Plugins:version (jar)
--------------------------------------------------------------
Compile			compile			core plugins
UT			test			core plugins
Package			package			core plugins
Dep2Artifactory		deploy			core plugins


What is Plugins?
-------------------------
All feature is power by plugins
-------------------
Core -> plugins
Community -> ext plugins


pom.xml
====================================
- its build file.
- Project Object Model
- Xml format
- contains
	Name 
	Version
	Depen
	Many many many more


groupId
artifactId

packaging: jar war ear pom

version
	Release - 1.0 1.1 1.1.1 [ major minor hotfix]
	Not Release - 1.0-SNAPSHOT 1.1-SNAPSHOT 1.1.1-SNAPSHOT [ major minor hotfix]	
name - Packagename
=======================================
Company name - microsoft
			office
				word
				excel
				slide
				outlook
				common
---------------CTO/EA
		Package Structure
		- Ease of Naming
		- Dep mgmt

		com.microsoft.office		==== groupId
		com.microsoft.office.word	==== artifactId
			import com.microsoft.office.common
		com.microsoft.office.excel
			import com.microsoft.office.common
		com.microsoft.office.common

		org

		net


mvn compile
mvn test
mvn package
==============================
https://maven.apache.org/ref/3.8.2/maven-core/lifecycles.html
================================================================

What is Artifactory?
----------------------------	
- Repo mgmt tool
- Written in Java
	= JRE
	= Platform ind
- From Jfrog
- Release
	https://jfrog.com/pricing/#hosted
- Version
	7.X	

What is repo?
-----------
	Version of Packages

Package
---------------------
System 
	EXE
	MSE
	Nuget
	Deb
	rpm
	DMG

Application
	zip
	jar
	war
	ear
	python
	ruby
	helm
	docker
	
Types of Packages?
---------------------
https://www.jfrog.com/confluence/display/JFROG/Package+Management

Why Artifactory?
---------------------------------
	ONE Centralized place for ALL KINDS of packages for your ORG
	Role Based Security
	Integration with Built tool
	Integration with CI tool
	Package Durability
			- Checksum
			- SHA
	Enforcess org process
	Admin
	- Cleanup
	- Backup
	- Audit & compliances

Other tools
- Sonatype Nexus
- Apache Archiva 


Architecture of Artifactory?
===================================
			   backend    
Human --> Artifcatory Web   --->  ------> DB	
	  (8082)
          HTML/JS/CS/JAVA   JAVA	  PS
					  Derby
				     	  MSQL
					  MYSQL
					  ORACLE

                           -----> FileStore
			    https://www.jfrog.com/confluence/display/JFROG/Configuring+the+Filestore

PORT for Upload & Downloading - 8081

How can i install it?
=============CENTOS = RHEL ==================

$ yum install wget -y
$ wget -O jfrog-rpm-installer.tar.gz "https://releases.jfrog.io/artifactory/artifactory-pro/org/artifactory/pro/jfrog-artifactory-pro/7.27.10/jfrog-artifactory-pro-7.27.10-linux.tar.gz"
$ tar -xvzf jfrog-rpm-installer.tar.gz
$ cd jfrog-platform-trial-pro*
$ sudo ./install.sh
$ sudo systemctl start artifactory.service
$ sudo systemctl start xray.service

wget https://releases.jfrog.io/artifactory/artifactory-pro-rpms/artifactory-pro-rpms.repo -O jfrog-artifactory-pro-rpms.repo;
sudo mv jfrog-artifactory-pro-rpms.repo /etc/yum.repos.d/;
sudo yum update && sudo yum install jfrog-artifactory-pro

=============Docker ==================

Docker Compose
$ wget -O jfrog-compose-installer.tar.gz "https://releases.jfrog.io/artifactory/jfrog-prox/org/artifactory/pro/docker/jfrog-platform-trial-prox/[RELEASE]/jfrog-platform-trial-prox-[RELEASE]-compose.tar.gz"

$ tar -xvzf jfrog-compose-installer.tar.gz
$ cd jfrog-platform-trial-pro*
$ sudo ./config.sh
$ sudo docker-compose -p trial-pro-rabbitmq -f docker-compose-rabbitmq.yaml up -d
$ sudo docker-compose -p trial-pro up -d

========================
# To determine your distribution, run lsb_release -c or cat /etc/os-release
# Example:echo "deb https://releases.jfrog.io/artifactory/artifactory-pro-debs xenial main" | sudo tee -a /etc/apt/sources.list;
wget -qO - https://releases.jfrog.io/artifactory/api/gpg/key/public | sudo apt-key add -;
echo "deb https://releases.jfrog.io/artifactory/artifactory-pro-debs {distribution} main" | sudo tee -a /etc/apt/sources.list;
sudo apt-get update && sudo apt-get install jfrog-artifactory-pro


https://jfrog.com/download-jfrog-platform/
=================
13.232.206.74
http://13.232.206.74:8082/
admin
Admin$123
=============================================================
Step 1  - Create Group and User and Permission

Step 2 - Create a repo  using Maven
======================================
Repo Type
---------------------------
- Local Repo	= Upload and Download and Hosted by Locally
- Remote Repo	= Download - its Cache of one Remote Repo. 
- Virtual Repo Aka Group
		- Collection of Local and Remote repo
Local repo
	Release		http://13.232.206.74:8082/artifactory/rajesh-release/
	Snapshot	http://13.232.206.74:8082/artifactory/rajesh-snapshop/
Remote Repo
	Require Another Maven Repo
	http://13.232.206.74:8082/artifactory/rajesh-remote/
 Virtual Repo
	http://13.232.206.74:8082/artifactory/rajesh-vritual/

How maven resolve a dependency?
---------------------------------

mvn -> pom.xml 			-------> Local Repo			--> Central Repo
	Read a depen lib	$USER_HOME/.m2					https://repo.maven.apache.org/maven2/
				C:\Users\Rajesh Kumar\.m2\repository		Download back to local repo


Step 3 - To Upload a Package - Modify pom.xml and Add Repo Location


<distributionManagement>
    <repository>
        <id>rajesh</id>
        <name>ip-172-31-10-156.ap-south-1.compute.internal-releases</name>
        <url>http://13.232.206.74:8081/artifactory/rajesh-release</url>
    </repository>

    <snapshotRepository>
        <id>rajesh</id>
        <name>ip-172-31-10-156.ap-south-1.compute.internal-snapshots</name>
        <url>http://13.232.206.74:8081/artifactory/rajesh-snapshop</url>
    </snapshotRepository>
</distributionManagement>


Step 4 - Modify setting.xml with Access of repo using element server
admin
Admin$123


Location 
- C:\tools\maven\conf\settings.xml
- /etc/maven/settings.xml
    <server>
      <id>rajesh</id>
      <username>admin</username>
      <password>Admin$123</password>
    </server>

Step - 5 =====


Element ID of Server and Element ID of repository must match




Step - 6
mvn deploy [ this would c-tes-p-i-upload to art)











